package org.firstinspires.ftc.teamcode;

import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.Servo;
import com.qualcomm.robotcore.hardware.CRServo;
import com.qualcomm.hardware.limelightvision.LLResult;
import com.qualcomm.hardware.limelightvision.Limelight3A;

import org.firstinspires.ftc.robotcore.external.navigation.AngleUnit;
import org.firstinspires.ftc.robotcore.external.navigation.DistanceUnit;
import org.firstinspires.ftc.robotcore.external.navigation.Pose2D;

@com.qualcomm.robotcore.eventloop.opmode.TeleOp(name="TeleOp", group="Linear OpMode")

public class TeleOpFieldCentric extends LinearOpMode {
    private DcMotor leftFront,leftBack,rightFront,rightBack,intake,turret,shooter;
    private CRServo ballTransfer;
    private Servo angle,lift2Launch;
    private Limelight3A limelight;
    GoBildaPinpointDriver odo;
    @Override
    public void runOpMode(){

        leftFront = hardwareMap.get(DcMotor.class, "leftFront");
        leftBack = hardwareMap.get(DcMotor.class, "leftBack");
        rightBack = hardwareMap.get(DcMotor.class, "rightBack");
        rightFront = hardwareMap.get(DcMotor.class, "rightFront");
        intake = hardwareMap.get(DcMotor.class, "intake");
        shooter = hardwareMap.get(DcMotor.class, "shooter");
        turret = hardwareMap.get(DcMotor.class, "turret");
        ballTransfer = hardwareMap.get(CRServo.class,"ballTransfer");
        angle = hardwareMap.get(Servo.class,"angle");
        lift2Launch = hardwareMap.get(Servo.class,"lift2Launch");
        limelight = hardwareMap.get(Limelight3A.class,"limelight");

        odo = hardwareMap.get(GoBildaPinpointDriver.class, "odo");
        odo.setOffsets(2,4);
        odo.setEncoderResolution(GoBildaPinpointDriver.GoBildaOdometryPods.goBILDA_4_BAR_POD);
        odo.setEncoderDirections(GoBildaPinpointDriver.EncoderDirection.FORWARD, GoBildaPinpointDriver.EncoderDirection.FORWARD);
        odo.resetPosAndIMU();
        Pose2D startingPosition= new Pose2D(DistanceUnit.INCH,0,0,AngleUnit.DEGREES,0);
        odo.setPosition(startingPosition);

        limelight.setPollRateHz(100);
        limelight.pipelineSwitch(0);
        limelight.start();
        telemetry.addData(">", "robot ready . press play");
        telemetry.update();

        leftFront.setDirection(DcMotor.Direction.REVERSE);
        leftBack.setDirection(DcMotor.Direction.REVERSE);
        rightFront.setDirection(DcMotor.Direction.FORWARD);
        rightBack.setDirection(DcMotor.Direction.FORWARD);
        intake.setDirection(DcMotor.Direction.REVERSE);
        ballTransfer.setDirection(CRServo.Direction.REVERSE);
        angle.setDirection(Servo.Direction.REVERSE);

        waitForStart();

        while (opModeIsActive()){
            fieldCentricDriveTrain();
            intakeControl();
            turretControl();
            angleManualOverride();
            turretManualOverride();
            shooterControl();
            telemetry.addData("leftFront Position",leftFront.getCurrentPosition());
            telemetry.addData("leftBack Position",leftBack.getCurrentPosition());
            telemetry.addData("rightFront Position",rightFront.getCurrentPosition());
            telemetry.addData("rightBack Position",rightBack.getCurrentPosition());
            telemetry.addData("Shooter Power", shooter.getPower());
            telemetry.addData("Device Scalar", odo.getYawScalar());
            telemetry.update();
            odo.update();
        }
    }
    public void fieldCentricDriveTrain(){
        double[] newDouble = {0,0,0,0,0};

        double forward = -gamepad1.left_stick_y;
        double strafe = gamepad1.left_stick_x;
        double spin = gamepad1.right_stick_x;

        Pose2D pos = odo.getPosition();
        double heading = pos.getHeading(AngleUnit.DEGREES);

        double cosAngle = Math.cos((Math.PI / 2)-heading);
        double sinAngle = Math.sin((Math.PI / 2)-heading);

        double globalStrafe = -forward * sinAngle + strafe * cosAngle;
        double globalForward = forward * cosAngle + strafe * sinAngle;

        double[] newWheelSpeeds = newDouble;

        newWheelSpeeds[0] = globalForward + globalStrafe + spin;
        newWheelSpeeds[1] = globalForward + globalStrafe - spin;
        newWheelSpeeds[2] = globalForward - globalStrafe + spin;
        newWheelSpeeds[3] = globalForward - globalStrafe - spin;

        leftFront.setPower(newWheelSpeeds[0]);
        leftBack.setPower(newWheelSpeeds[1]);
        rightFront.setPower(newWheelSpeeds[2]);
        rightBack.setPower(newWheelSpeeds[3]);
        telemetry.addData("X Pos", pos.getX(DistanceUnit.INCH));
        telemetry.addData("Y Pos", pos.getY(DistanceUnit.INCH));
        telemetry.addData("Heading", heading);

    }
    public void intakeControl(){
        if (gamepad1.right_trigger>0.5){
            intake.setPower(-1);
            ballTransfer.setPower(1);
        }
        else if (gamepad1.left_trigger>0.5){
            intake.setPower(0);
            ballTransfer.setPower(0);
        }
    }
    public void shooterControl(){
        if (gamepad1.right_bumper){
            shooter.setPower(.5);
        }
        else if (gamepad1.left_bumper){
            shooter.setPower(0);
        }
        if (gamepad2.right_trigger>0.5){
            lift2Launch.setPosition(1);
        }
        else {
            lift2Launch.setPosition(0);
        }
    }
    public void turretControl(){
        LLResult result = limelight.getLatestResult();
        double tx = 0;
        double ta = 0;
        if (result !=null&& result.isValid()){
            tx = result.getTx();
            double ty = result.getTy();
            ta = result.getTa();

            telemetry.addData("Target X", tx);
            telemetry.addData("Target Y", ty);
            telemetry.addData("Target Area", ta);

        } else {
            telemetry.addData("limelight","No targets");
        }
        double kP = 0.05;
        double turnPower = kP * tx;
        if (Math.abs(tx)> 3.30 && ta < .33){
            turret.setPower(0);
            telemetry.addData("status", "alligned!");
            telemetry.update();
        }
        turret.setPower(turnPower);
        telemetry.update();
        telemetry.addData("tx", tx);
        telemetry.addData("ta",ta);
        telemetry.addData("turnpower", turnPower);

    }
    public void angleManualOverride(){
        if (gamepad2.dpad_up){
            angle.setPosition(angle.getPosition()+1);
        }
        else if (gamepad2.dpad_down){
            angle.setPosition(angle.getPosition()-1);
        }
        else {
            angle.setPosition(angle.getPosition());
        }
    }
    public void turretManualOverride(){
        turret.setPower(gamepad2.left_stick_x);
    }
}
