package org.firstinspires.ftc.teamcode;

import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.HardwareMap;
import com.qualcomm.robotcore.hardware.I2cDevice;
import com.qualcomm.robotcore.hardware.I2cDeviceSynch;

@com.qualcomm.robotcore.eventloop.opmode.TeleOp(name="TeleOp", group="Linear OpMode")

public class TeleOp extends LinearOpMode {
    private DcMotor leftFront,leftBack,rightFront,rightBack,intake;
    private I2cDeviceSynch huskylens;
    public void init(HardwareMap hardwaremap){
        leftFront = hardwareMap.get(DcMotor.class, "leftFront");
        leftBack = hardwareMap.get(DcMotor.class, "leftBack");
        rightBack = hardwareMap.get(DcMotor.class, "rightBack");
        rightFront = hardwareMap.get(DcMotor.class, "rightFront");
        intake = hardwareMap.get(DcMotor.class, "intake");

        leftFront.setDirection(DcMotor.Direction.REVERSE);
        leftBack.setDirection(DcMotor.Direction.REVERSE);
        rightFront.setDirection(DcMotor.Direction.FORWARD);
        rightBack.setDirection(DcMotor.Direction.FORWARD);
        intake.setDirection(DcMotor.Direction.REVERSE);

        I2cDevice i2cDevice = hardwareMap.i2cDevice.get("huskylens");
        huskylens = new org.firstinspires.ftc.teamcode.I2cDeviceSynchImpl(i2cDevice, 0x32, false);
        huskylens.engage();
    }
    public byte[] readData() {
        byte[] data = huskylens.read(0, 32);
        return data;
    }
    @Override
    public void runOpMode(){
        waitForStart();

        while (opModeIsActive()){
            driveTrain();
            
            if (gamepad1.right_bumper){
                intake.setPower(-1);
            }
            else if (gamepad1.left_bumper){
                intake.setPower(0);
            }
       
            telemetry.update();
        }
        public void processHuskyLensData(byte[] data) {
            if (data != null && data.length > 0) {
                // Assume the first byte represents the number of detected objects
                int numObjects = data[0];  // Replace with proper parsing logic

                // Example for parsing object info from data
                for (int i = 1; i <= numObjects; i++) {
                    // Extract object data (e.g., x, y, width, height, etc.)
                    // Here, we're assuming some known offsets in the data.
                    int objectX = data[i * 4];
                    int objectY = data[i * 4 + 1];
                    int objectWidth = data[i * 4 + 2];
                    int objectHeight = data[i * 4 + 3];

                    // Process the data for robot actions (e.g., align robot to object)
                }
            }
        }
        private void driveTrain(){
            double x = -gamepad1.left_stick_y;
            double y = gamepad1.left_stick_x;
            double z = gamepad1.right_stick_x;

            double leftFrontPower = x + y + z;
            double leftBackPower = x - y + z;
            double rightFrontPower = x - y - z;
            double rightBackPower = x + y - z;

            leftFront.setPower(leftFrontPower);
            leftBack.setPower(leftBackPower);
            rightFront.setPower(rightFrontPower);
            rightBack.setPower(rightBackPower);
        }
    }
}
