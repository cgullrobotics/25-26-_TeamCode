package org.firstinspires.ftc.teamcode;

import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.Servo;
import com.qualcomm.robotcore.hardware.CRServo;
import com.qualcomm.hardware.limelightvision.LLResult;
import com.qualcomm.hardware.limelightvision.LLResultTypes;
import com.qualcomm.hardware.limelightvision.LLStatus;
import com.qualcomm.hardware.limelightvision.Limelight3A;
import org.firstinspires.ftc.robotcore.external.navigation.Pose3D;

@com.qualcomm.robotcore.eventloop.opmode.TeleOp(name="TeleOp2025", group="Linear OpMode")

public class TeleOp extends LinearOpMode {
    private DcMotor leftFront,leftBack,rightFront,rightBack,intake,turret,shooter;
    private CRServo ballTransfer1,ballTransfer2;
    private Servo angle,lift2Launch;
    private Limelight3A limelight;

    @Override
    public void runOpMode(){
        leftFront = hardwareMap.get(DcMotor.class, "leftFront");
        leftBack = hardwareMap.get(DcMotor.class, "leftBack");
        rightBack = hardwareMap.get(DcMotor.class, "rightBack");
        rightFront = hardwareMap.get(DcMotor.class, "rightFront");
        intake = hardwareMap.get(DcMotor.class, "intake");
        shooter = hardwareMap.get(DcMotor.class, "shooter");
        turret = hardwareMap.get(DcMotor.class, "turret");
        ballTransfer1 = hardwareMap.get(CRServo.class,"ballTransfer1");
        ballTransfer2 = hardwareMap.get(CRServo.class,"ballTransfer2");
        angle = hardwareMap.get(Servo.class,"angle");
        lift2Launch = hardwareMap.get(Servo.class,"lift2Launch");
        limelight = hardwareMap.get(Limelight3A.class,"limelight");

        limelight.setPollRateHz(100);
        limelight.pipelineSwitch(1);
        limelight.start();
        telemetry.addData(">", "robot ready . press play");
        telemetry.update();

        leftFront.setDirection(DcMotor.Direction.FORWARD);
        leftBack.setDirection(DcMotor.Direction.FORWARD);
        rightFront.setDirection(DcMotor.Direction.REVERSE);
        rightBack.setDirection(DcMotor.Direction.REVERSE);
        intake.setDirection(DcMotor.Direction.REVERSE);
        ballTransfer1.setDirection(CRServo.Direction.REVERSE);
        ballTransfer1.setDirection(CRServo.Direction.REVERSE);
        angle.setDirection(Servo.Direction.REVERSE);

        waitForStart();

        while (opModeIsActive()){
            driveTrain();
            intakeControl();
            turretControl();
            angleManualOverride();
            turretManualOverride();
            shooterControl();
            telemetry.addData("Shooter Power", shooter.getPower());

            telemetry.update();

        }
    }
    public void driveTrain(){
        double x = -gamepad1.left_stick_y;
        double y = gamepad1.left_stick_x;
        double z = gamepad1.right_stick_x;

        double leftFrontPower = x + y + z;
        double leftBackPower = x - y + z;
        double rightFrontPower = x - y - z;
        double rightBackPower = x + y - z;

        leftFront.setPower(leftFrontPower);
        leftBack.setPower(leftBackPower);
        rightFront.setPower(rightFrontPower);
        rightBack.setPower(rightBackPower);
    }
    public void intakeControl(){
        if (gamepad1.a){
            intake.setPower(-1);
            ballTransfer1.setPower(1);
            ballTransfer2.setPower(1);
        }
        else if (gamepad1.b){
            intake.setPower(0);
            ballTransfer1.setPower(0);
            ballTransfer2.setPower(0);
        }
    }
    public void shooterControl(){
        if (gamepad1.right_bumper){
            LLResult result = limelight.getLatestResult();
            double targetArea = 0;
            double motorPower = 0;

            if (result != null && result.isValid()) {
                targetArea = result.getTa();  // Larger area = closer target

                // Example: proportional speed control
                // As targetArea increases (closer), power decreases.
                // targetArea typically ranges ~0.1 (far) to ~20+ (very close)
                motorPower = 1.0 - (targetArea * 1.5);
                motorPower = Math.max(.2, Math.min(motorPower, 1.0)); // Clamp between 0.1â€“0.5

                shooter.setPower(motorPower);

                telemetry.addData("Target Area", targetArea);
                telemetry.addData("Motor Power", motorPower);
                telemetry.addData("Status", "Tracking Target");
            } else {
                // No target found â€” stop motor
                shooter.setPower(0);
                telemetry.addData("Status", "No Target Found");
            }
        }
        else if (gamepad1.left_bumper){
            shooter.setPower(0);
        }
        if (gamepad2.right_bumper){
            lift2Launch.setPosition(1);
        }
        else if (gamepad2.left_bumper){
            lift2Launch.setPosition(0);
        }
    }
    public void turretControl(){
        LLResult result = limelight.getLatestResult();
        double tx = 0;
        double ta = 0;
        double targetArea = 0;
        double motorPower = 0;

        if (result !=null&& result.isValid()){
            tx = result.getTx();
            double ty = result.getTy();
            ta = result.getTa();

            telemetry.addData("Target X", tx);
            telemetry.addData("Target Y", ty);
            telemetry.addData("Target Area", ta);

        } else {
            telemetry.addData("limelight","No targets");
        }
        double kP = .1;
        double turnPower = kP * tx;

        if (Math.abs(tx)> -5 && ta < .1){
            turret.setPower(0);
            telemetry.addData("status", "alligned!");
            telemetry.update();
        }else {
        turret.setPower(turnPower);
        telemetry.update();
        telemetry.addData("tx", tx);
        telemetry.addData("ta",ta);
        telemetry.addData("turnpower", turnPower);}
    }
    public void angleManualOverride(){
        if (gamepad2.dpad_up){
            angle.setPosition(angle.getPosition()+1);
        }
        else if (gamepad2.dpad_down){
            angle.setPosition(angle.getPosition()-1);
        }
        else {
            angle.setPosition(angle.getPosition());
        }
    }
    public void turretManualOverride(){
        turret.setPower(gamepad2.left_stick_x);
    }
}
